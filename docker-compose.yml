version: '3.7'
services:

  # Running postgres on port 5432
  postgres:
    build:
      context: './postgres'
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - dbdata:/var/lib/postgresql/data
    restart: always

  # Running pgAdmin on port 5555
  # Note: On deployment you need to set the server configs after login into the pgAdmin client. Use the postgres
  #       configs for this one
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    depends_on:
      - postgres
    ports:
      - 5555:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - SERVER_MODE=True
    restart: always

  # A service container to
  dbs-configurator:
    build:
      context: './dbs-configurator'
    container_name: dbs-configurator
    depends_on:
      - postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GF_PG_USER=${GF_PG_USER}
      - GF_PG_PASSWORD=${GF_PG_PASSWORD}
    restart: always

  # Running grafana on port 8080
  grafana:
    build:
      context: './grafana'
    container_name: grafana
    depends_on:
      - postgres
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_PG_USER=${GF_PG_USER}
      - GF_PG_PASSWORD=${GF_PG_PASSWORD}
    ports:
      - '8081:3000'
    user: "root"
    volumes:
      - grafana_storage:/var/lib/grafana
    restart: always


  # Data analytics and NLP worker 
  analyzer:
    build:
      context: './analyzer'
    container_name: analyzer
    depends_on:
      - postgres
      - dbs-configurator
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: always

  # Data analytics and NLP worker
  scraper:
    build:
      context: './scraper'
    container_name: scraper
    depends_on:
      - postgres
      - dbs-configurator
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: always

  # Server monitoring tools - node exporter
  # Will only run on Linux OS
  node-exporter:
    image: prom/node-exporter:v1.0.1
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    restart: always

  prometheus:
    image: prom/prometheus:v2.1.0
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    restart: always

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    privileged: true
    command: -logtostderr -v=4 -docker_only
    volumes:    
      - '/:/rootfs:ro'
      - '/var/run:/var/run:rw'
      - '/sys:/sys:ro'
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker|rootfs/var/lib/docker|rootfs/run/docker|rootfs/var/lib/docker)($$|/)"
      - "^/(sys|proc|dev|host|etc|rootfs/cgroup|rootfs/cgroup)($$|/)"
    restart: always
    ports:
      - 8080:8080

volumes:
  dbdata:
  grafana_storage:
  prometheus_data:
